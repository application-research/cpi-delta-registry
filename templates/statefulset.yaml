{{- $sizeConfig := include "cpi-delta-registry.getSizeConfig" . | fromYaml }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.global.customer.name }}-{{ .Values.product }}
  namespace: customer-{{ .Values.global.customer.name }}
  annotations:
    argocd.argoproj.io/sync-wave: "15"
  labels:
    app: {{ .Values.global.customer.name }}-{{ .Values.product }}
spec:
  serviceName: {{ .Values.global.customer.name }}-{{ .Values.product }}
  podManagementPolicy: "Parallel"
  replicas: 3
  selector:
    matchLabels:
      app: {{ .Values.global.customer.name }}-{{ .Values.product }}
  template:
    metadata:
      labels:
        app: {{ .Values.global.customer.name }}-{{ .Values.product }}
      annotations:
        kubernetes.io/ingress-bandwidth: {{ $sizeConfig.ingressBandwidth }}
        kubernetes.io/egress-bandwidth: {{ $sizeConfig.egressBandwidth }}
    spec:
      containers:
      - name: {{ .Values.product }}
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        workingDir: /app
        command:
          - /bin/sh
          - '-c'
          - npm run build && npm run start
        ports:
          - name: registry-http
            containerPort: 3000
            protocol: TCP
        readinessProbe:
          httpGet:
            path: /
            port: registry-http
        resources:
          limits:
            cpu: "{{ $sizeConfig.cpuLimit }}"
            memory: "{{ $sizeConfig.memoryLimit }}"
          requests:
            cpu: "{{ $sizeConfig.cpuRequest }}"
            memory: "{{ $sizeConfig.memoryRequest }}"
        volumeMounts:
            - name: config-volume
              mountPath: /app/.env
              subPath: config.env
      volumes:
        - name: config-volume
          configMap:
            name: {{ .Values.global.customer.name }}-{{ .Values.product }}-config
            items:
              - key: config.env
                path: config.env